% Function to generate figures in the paper except the critical hmin maps.
% Most figures are drawn here, without repitition, the user can generate
% all the figures by replicating the code given below. 
% Note that running this function will generate several figures, the user is 
% requested to comment out some of the below sections and run a few at a time,
% if one does not wish to close too many figure windows. However, running
% without commenting some lines can also be a quick way to check all the
% figures in one go.

function genFigs

%% Squares in Figure 5c and 6. 
% Squares are generated by calling makeMultiRect(), which takes cList as
% input. The description of cList is given in makeMultiRect. 
% This section generates the squares in figures 5c and 6, which are used to explain 
% the concept of corner pixels.

cList = cell(2,3);
cList{1,1} = [301 301]; % Top left corner of upper square
cList{1,2} = 200;
cList{1,3} = 200;
cList{2,1} = [450 405]; % Top left corner of lower square
cList{2,2} = 200;
cList{2,3} = 200;

% Generate the squares
S1 = makeMultiRect(1000,cList);
% Call EDT and watershed with hmin 0, display images
[W_sq Ibin_sq marker_sq Dsquare] = make_watershed(S1,0,'Euclidean',1);
% Call EDT and watershed with hmin 0, suppress images
%[W_rec Ibin_rec smarker1 Dsquare] = make_watershed(S1,0,'Euclidean',0);

%% Circles in figures 9a, 9c
% Circles are generated by calling makeMultiCircle(), which takes cList as
% input. The description of cList is given in makeMultiCircle. 
% This section generates the circles in figures 9a and 9c.

% Circle 9a
cList = cell(2,2);
cList{1,1} = [500 300]; % Center of left circle
cList{1,2} = 200;       % Radius
cList{2,1} = [500 550]; % Center of right circle
cList{2,2} = 200;       % Radius

% Generate the circle
C1_0 = makeMultiCircle(1000,cList);
% Call EDT and watershed with hmin 0, display images
[W_C1_0 Ibin_C1_0 marker_C1_0 D_C1_0] = make_watershed(C1_0,0,'Euclidean',1);
% Call EDT and watershed with hmin 0, suppress images
%[W_C1_0 Ibin_C1_0 marker_C1_0 D_C1_0] = make_watershed(C1_0,0,'Euclidean',0);

% Circle 9c
cList = cell(2,2);
cList{1,1} = [500 300]; % Center of top circle
cList{1,2} = 200; % Radius
cc_dist = 300; % center-center distance
cList{2,1} = [(cList{1,1}(1) + cc_dist*sind(30))  (cList{1,1}(2) + cc_dist*cosd(30))]; % Second circle center
cList{2,2} = 200; %Radius

% Generate the circle
C1_30 = makeMultiCircle(1000,cList);
% Call EDT and watershed with hmin 0, display images
[W_C1_30 Ibin_C1_30 marker_C1_30 D_C1_30] = make_watershed(C1_30,0,'Euclidean',1);
% Call EDT and watershed with hmin 0, suppress images
%[W_C1_30 Ibin_C1_30 marker_C1_30 D_C1_30] = make_watershed(C1_30,0,'Euclidean',0);

%% Voronoi diagram in Figure 11
% Note that in the final Voronoi diagram, the minima are imposed as red
% dots. Also, the y-coordinates must be subtracted from 1000 to get the
% corresponding y-coordinates of the minima in the original figure. The
% colouring differs between the figures generated by the code and the ones
% in the paper, the latter have been made publication ready.

% Voronoi 11 circles
cList = cell(2,2);
cList{1,1} = [500 300]; % Center of left circle
cList{1,2} = 200;       % Radius
cc_dist = 172; % center-center distance
cList{2,1} = [(cList{1,1}(1) + cc_dist*sind(30))  (cList{1,1}(2) + cc_dist*cosd(30))]; % Second circle center
cList{2,2} = 100; %Radius

% Generate the circle
C1_30_2 = makeMultiCircle(1000,cList);
% Call EDT and watershed with hmin 0, suppress images
[W_C1_30_2 Ibin_C1_30_2 marker_C1_30_2 D_C1_30_2] = make_watershed(C1_30_2,0,'Euclidean',0); 

% Find corner pixels
C_corn = findCorners(C1_30_2);

% Coordinates of corner pixels
[x,y] = find(C_corn);

% Voronoi Diagram, such that the axes match with those of the original
% figure
voronoi(y,1000 - x)
% Superpose minima on Voronoi
[xm,ym] = find(marker_C1_30_2); % locations of minima
hold on
plot(ym,1000 - xm,'o','MarkerFaceColor','r','MarkerEdgeColor','r','MarkerSize',2)

%% Single ellipses in 12b and 12f
% Single and multiple ellipses are generated with makeEllipse_angle, which
% accepts the geometry information in a cell, eList, details of which are
% given in makeEllipse_angle.m. Note that the rest of the ellipses in
% Figure 12 can be easily generated by modifying the geometry in eList
% below. 

% Ellipse in 12b with angle of inclination 30 degrees, semi major axis 200
% and semi minor axis 100, aspect ratio 1:2
eList = cell(1,4);
eList{1,1} = [500 500]; % center
eList{1,2} = 100; % Semi-minor axis
eList{1,3} = 200; % Semi-major axis
eList{1,4} = 30;  % Angle of major axis with horizontal

% Generate the ellipse
E1a = makeEllipse_angle(1000,eList);
% Call EDT and watershed with hmin 0, display images
[W_E1_30a Ibin_E1_30a marker_E1_30a D_E1_30a] = make_watershed(E1a,0,'Euclidean',1);
% Call EDT and watershed with hmin 0, suppress images
%[W_E1_30a Ibin_E1_30a marker_E1_30a D_E1_30a] = make_watershed(E1a,0,'Euclidean',0);


% Ellipse in 12f with angle of inclination 30 degrees, semi major axis 200
% and semi minor axis 50, aspect ratio 1:4
eList = cell(1,4);
eList{1,1} = [500 500]; % center
eList{1,2} = 50; % Semi-minor axis
eList{1,3} = 200; % Semi-major axis
eList{1,4} = 30;  % Angle of major axis with horizontal

% Generate the ellipse
E1b = makeEllipse_angle(1000,eList);
% Call EDT and watershed with hmin 0, display images
[W_E1_30b Ibin_E1_30b marker_E1_30b D_E1_30b] = make_watershed(E1b,0,'Euclidean',1);
% Call EDT and watershed with hmin 0, suppress images
%[W_E1_30b Ibin_E1_30b marker_E1_30b D_E1_30b] = make_watershed(E1b,0,'Euclidean',0);

%% Double ellipses in figures 13b and 13d, with Voronoi diagrams in Figure 14c and 14d
% Note that the rest of the ellipses in Figure 13 can be easily generated
% by modidying the geometry in eList below.

% Ellipses in 13b.
% Two ellipses of the same aspect ratio 1:2, right ellipse is inclined at
% 0, left ellipse at 90 degrees.

eList = cell(2,4);
eList{1,1} = [500 500]; % center
eList{1,2} = 100; % Semi-minor axis
eList{1,3} = 200; % Semi-major axis
eList{1,4} = 90;  % Angle of major axis with horizontal
eList{2,1} = [400 600]; % center
eList{2,2} = 100; % Semi-minor axis
eList{2,3} = 200; % Semi-major axis
eList{2,4} = 0;  % Angle of major axis with horizontal

% Generate the ellipse
E11_0 = makeEllipse_angle(1000,eList);
% Call EDT and watershed with hmin 0, display images
[W_E11_0 Ibin_E11_0 marker_E11_0 D_E11_0] = make_watershed(E11_0,0,'Euclidean',1);
% Call EDT and watershed with hmin 0, suppress images
%[W_E11_0 Ibin_E11_0 marker_E11_0 D_E11_0] = make_watershed(E11_0,0,'Euclidean',0);

% Voronoi diagram 
% Find corner pixels
E_corn = findCorners(E11_0);

% Coordinates of corner pixels
[x,y] = find(E_corn);

% Voronoi Diagram, such that the axes match with those of the original
% figure
voronoi(y,1000 - x)
% Superpose minima on Voronoi
[xm,ym] = find(marker_E11_0); % locations of minima
hold on
plot(ym,1000 - xm,'o','MarkerFaceColor','r','MarkerEdgeColor','r','MarkerSize',2)


% Ellipses in 13d.
% Two ellipses of the same aspect ratio 1:2, right ellipse is inclined at
% 30, left ellipse at 90 degrees.

eList = cell(2,4);
eList{1,1} = [500 500]; % center
eList{1,2} = 100; % Semi-minor axis
eList{1,3} = 200; % Semi-major axis
eList{1,4} = 90;  % Angle of major axis with horizontal
eList{2,1} = [400 600]; % center
eList{2,2} = 100; % Semi-minor axis
eList{2,3} = 200; % Semi-major axis
eList{2,4} = 30;  % Angle of major axis with horizontal

% Generate the ellipse
E11_30 = makeEllipse_angle(1000,eList);
% Call EDT and watershed with hmin 0, display images
[W_E11_30 Ibin_E11_30 marker_E11_30 D_E11_30] = make_watershed(E11_30,0,'Euclidean',1);
% Call EDT and watershed with hmin 0, suppress images
%[W_E11_30 Ibin_E11_30 marker_E11_30 D_E11_30] = make_watershed(E11_30,0,'Euclidean',0);

% Voronoi diagram 
% Find corner pixels
E_corn = findCorners(E11_30);

% Coordinates of corner pixels
[x,y] = find(E_corn);

% Voronoi Diagram, such that the axes match with those of the original
% figure
voronoi(y,1000 - x)
% Superpose minima on Voronoi
[xm,ym] = find(marker_E11_30); % locations of minima
hold on
plot(ym,1000 - xm,'o','MarkerFaceColor','r','MarkerEdgeColor','r','MarkerSize',2)





